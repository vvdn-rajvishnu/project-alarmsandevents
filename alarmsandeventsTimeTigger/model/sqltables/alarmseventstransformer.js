var Sequelize = require('sequelize');

var objTransformerevents = {
    id: { type: Sequelize.INTEGER(), primaryKey: true, autoIncrement: true },
    Rev: { type: Sequelize.INTEGER()},
    Count: { type: Sequelize.INTEGER()},
    CountryCode: { type: Sequelize.INTEGER()},
    RegionCode: { type: Sequelize.INTEGER()},
    CellID: { type: Sequelize.INTEGER()},
    MeterSerialNumber: { type: Sequelize.STRING(100)},
    CircuitID: { type: Sequelize.STRING(100) },
    HypersproutID: { type: Sequelize.STRING(100)},
    TransformerID: { type: Sequelize.STRING(100)},    
    Meter_DeviceID: { type: Sequelize.INTEGER(1)},    
    Type: { type: Sequelize.STRING(100)},
    Action: { type: Sequelize.STRING(100)},
    Attribute: { type: Sequelize.STRING(100)},   
    Phase : { type: Sequelize.INTEGER()},
    NoOfMeter : { type: Sequelize.INTEGER()},
    StatusTransformer : { type: Sequelize.STRING(100)},
    OverVoltage : { type: Sequelize.INTEGER() },
    UnderVoltage : { type: Sequelize.INTEGER() },
    "OverLoadLine1(MD Alarm)" : { type: Sequelize.INTEGER() },
    "OverLoadLine2(MD Alarm)" : { type: Sequelize.INTEGER()},
    "OverLoadLine3(MD Alarm)" : { type: Sequelize.INTEGER()},
    OverFrequency : { type: Sequelize.INTEGER()},
    UnderFrequency : { type: Sequelize.INTEGER()},
    PowerFailure : { type: Sequelize.INTEGER()},
    PTOpen : { type: Sequelize.INTEGER()},
    OilLevelSensorFailure : { type: Sequelize.INTEGER()},
    TamperLid : { type: Sequelize.INTEGER()},
    TamperBox : { type: Sequelize.INTEGER()},
    LowOilLevel : { type: Sequelize.INTEGER()},
    HighOilTemperature : { type: Sequelize.INTEGER()},
    LowBatteryVoltage : { type: Sequelize.INTEGER()},
    BatteryFailure : { type: Sequelize.INTEGER()},
    BatteryRemoved : { type: Sequelize.INTEGER()},
    PrimaryPowerUp : { type: Sequelize.INTEGER()},
    PrimaryPowerDown : { type: Sequelize.INTEGER()},
    "Non-TechnicalLoss" : { type: Sequelize.INTEGER()},
    MeterConnected : { type: Sequelize.INTEGER()},
    MeterDisconnected : { type: Sequelize.INTEGER()},
    "Wi-FiCommunicationLoss" : { type: Sequelize.INTEGER()},
    "3G/4G/LTECommunicationLoss" : { type: Sequelize.INTEGER()},
    Communicationattemptsexceeded : { type: Sequelize.INTEGER()},
    UnAuthenticatedConnectionRequest : { type: Sequelize.INTEGER()},
	ReadTimestamp : { type: Sequelize.DATE},    
    DBTimestamp : { type: Sequelize.DATE},

    Meter_Phase : { type: Sequelize.INTEGER(1)},
    Meter_Status : { type: Sequelize.STRING(100)},
    Meter_ReadTimestamp : { type: Sequelize.DATE},
    Meter_VoltageSagLine1 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageSagLine2 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageSagLine3 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageSwellLine1 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageSwellLine2 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageSwellLine3 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageUnbalance : { type: Sequelize.INTEGER(1)},
    Meter_VoltageCablelossLine1 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageCablelossLine2 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageCablelossLine3 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageTHDOverLimitLine1 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageTHDOverLimitLine2 : { type: Sequelize.INTEGER(1)},
    Meter_VoltageTHDOverLimitLine3 : { type: Sequelize.INTEGER(1)},
    Meter_CurrentTHDOverLimitLine1 : { type: Sequelize.INTEGER(1)},
    Meter_CurrentTHDOverLimitLine2 : { type: Sequelize.INTEGER(1)},
    Meter_CurrentTHDOverLimitLine3 : { type: Sequelize.INTEGER(1)},
    Meter_PrimaryPowerUp : { type: Sequelize.INTEGER(1)},
    Meter_PrimaryPowerDown : { type: Sequelize.INTEGER(1)},
    Meter_LongOutagedetection : { type: Sequelize.INTEGER(1)},
    Meter_ShortOutagedetection : { type: Sequelize.INTEGER(1)},
    Meter_NonvolatileMemoryFailed : { type: Sequelize.INTEGER(1)},
    Meter_Clockerrordetected : { type: Sequelize.INTEGER(1)},
    Meter_LowBatteryVoltage : { type: Sequelize.INTEGER(1)},
    Meter_FlashMemoryFailed : { type: Sequelize.INTEGER(1)},
    Meter_Firmwareupgraded : { type: Sequelize.INTEGER(1)},
    Meter_Demandreset : { type: Sequelize.INTEGER(1)},
    Meter_TimeSynchronized : { type: Sequelize.INTEGER(1)},
    Meter_Historylogcleared : { type: Sequelize.INTEGER(1)},
    Meter_Coverremoval : { type: Sequelize.INTEGER(1)},
    Meter_Terminalcoverremoval : { type: Sequelize.INTEGER(1)},
    Meter_MeterDisconnected : { type: Sequelize.INTEGER(1)},
    Meter_MeterConnected : { type: Sequelize.INTEGER(1)},
    "Meter_Demandresponseofimportactpwr(kW+)" : { type: Sequelize.INTEGER(1)},
    "Meter_Demandresponseofexportactpwr(kW-)" : { type: Sequelize.INTEGER(1)},
    "Meter_Demandresponseofimportreactpwr(kVar+)" : { type: Sequelize.INTEGER(1)},
    "Meter_Demandresponseofexportreactpwr(kVar-)" : { type: Sequelize.INTEGER(1)}
}

var objTableProps = {
        timestamps: true,
        freezeTableName: true,
        tableName: 'alarmseventstransformer'
    } 

module.exports = {
    objTransformerevents: objTransformerevents,
    objTableProps: objTableProps
}